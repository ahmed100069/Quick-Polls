{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ahmed\\\\realtime-polling-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport CreatePoll from './components/CreatePoll.js';\nimport PollList from './components/PollList.js';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nfunction App() {\n  _s();\n  const [polls, setPolls] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchPolls();\n    socket.on('pollCreated', newPoll => {\n      setPolls(prev => [newPoll, ...prev]);\n    });\n    socket.on('voteUpdate', updatedPoll => {\n      setPolls(prev => prev.map(poll => poll._id === updatedPoll._id ? updatedPoll : poll));\n    });\n    return () => {\n      socket.off('pollCreated');\n      socket.off('voteUpdate');\n    };\n  }, []);\n  const fetchPolls = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/polls');\n      setPolls(response.data);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching polls:', error);\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83D\\uDDF3\\uFE0F Real-Time Polling App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Create polls and see results in real-time!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"app-main\",\n      children: [/*#__PURE__*/_jsxDEV(CreatePoll, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Loading polls...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(PollList, {\n        polls: polls\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"2egvX48BPRJr1Uqr/c6CYJUoQeU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","io","axios","CreatePoll","PollList","jsxDEV","_jsxDEV","socket","App","_s","polls","setPolls","loading","setLoading","fetchPolls","on","newPoll","prev","updatedPoll","map","poll","_id","off","response","get","data","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ahmed/realtime-polling-app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport CreatePoll from './components/CreatePoll.js';\r\nimport PollList from './components/PollList.js';\r\nimport './App.css';\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nfunction App() {\r\n  const [polls, setPolls] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchPolls();\r\n    \r\n    socket.on('pollCreated', (newPoll) => {\r\n      setPolls(prev => [newPoll, ...prev]);\r\n    });\r\n\r\n    socket.on('voteUpdate', (updatedPoll) => {\r\n      setPolls(prev => prev.map(poll => \r\n        poll._id === updatedPoll._id ? updatedPoll : poll\r\n      ));\r\n    });\r\n\r\n    return () => {\r\n      socket.off('pollCreated');\r\n      socket.off('voteUpdate');\r\n    };\r\n  }, []);\r\n\r\n  const fetchPolls = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/polls');\r\n      setPolls(response.data);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching polls:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"app-header\">\r\n        <h1>üó≥Ô∏è Real-Time Polling App</h1>\r\n        <p>Create polls and see results in real-time!</p>\r\n      </header>\r\n\r\n      <main className=\"app-main\">\r\n        <CreatePoll />\r\n        {loading ? (\r\n          <div className=\"loading\">Loading polls...</div>\r\n        ) : (\r\n          <PollList polls={polls} />\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}